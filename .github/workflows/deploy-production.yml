name: Deploy Produ√ß√£o

on:
  # Trigger manual com aprova√ß√£o
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de destino'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      
      confirm:
        description: 'Digite "DEPLOY" para confirmar'
        required: true
        type: string

  # Trigger autom√°tico quando PR √© merged na main
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.github/workflows/backup-production.yml'

# Configura√ß√£o de concorr√™ncia - apenas um deploy por vez
concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  # Job de valida√ß√£o inicial
  validate:
    name: Validar Deploy
    runs-on: ubuntu-latest
    
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Verificar confirma√ß√£o manual
        if: github.event_name == 'workflow_dispatch'
        id: check_confirm
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "DEPLOY" ]; then
            echo "‚ùå Confirma√ß√£o inv√°lida. Digite 'DEPLOY' para confirmar."
            exit 1
          fi
          echo "‚úÖ Confirma√ß√£o v√°lida"
      
      - name: Verificar mudan√ßas
        id: check
        run: |
          # Verifica se h√° mudan√ßas relevantes
          if [ "${{ github.event_name }}" = "push" ]; then
            # Para push, sempre fazer deploy
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            # Para manual, sempre fazer deploy
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Exibir informa√ß√µes
        run: |
          echo "üöÄ Deploy para Produ√ß√£o"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Autor: ${{ github.actor }}"
          echo "Evento: ${{ github.event_name }}"

  # Job de aprova√ß√£o manual
  approval:
    name: Aguardar Aprova√ß√£o
    needs: validate
    runs-on: ubuntu-latest
    if: needs.validate.outputs.should_deploy == 'true'
    
    environment:
      name: production
      url: https://insight-flow.vercel.app
    
    steps:
      - name: Aguardando aprova√ß√£o
        run: |
          echo "‚è≥ Aguardando aprova√ß√£o manual..."
          echo "Este deploy requer aprova√ß√£o de um administrador autorizado."
          echo ""
          echo "üìã Informa√ß√µes do Deploy:"
          echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo "  ‚Ä¢ Autor: ${{ github.actor }}"
          echo ""
          echo "‚úÖ Aprova√ß√£o concedida!"

  # Job de build e testes
  build:
    name: Build e Testes
    needs: approval
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Instalar depend√™ncias
        run: npm ci
      
      - name: Verificar vari√°veis de ambiente
        env:
          VITE_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
        run: |
          echo "üîç Verificando vari√°veis de ambiente..."
          npm run verify-env
      
      - name: Build da aplica√ß√£o
        env:
          VITE_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
        run: |
          echo "üî® Construindo aplica√ß√£o..."
          npm run build
      
      - name: Upload do build
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 7

  # Job de deploy no Vercel
  deploy:
    name: Deploy no Vercel
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: production
      url: https://insight-flow.vercel.app
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Download do build
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/
      
      - name: Deploy para Vercel
        uses: amondnet/vercel-action@v25
        id: vercel_deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
      
      - name: Verificar deploy
        run: |
          echo "‚úÖ Deploy conclu√≠do com sucesso!"
          echo "üåê URL: ${{ steps.vercel_deploy.outputs.preview-url }}"
      
      - name: Comentar no PR (se aplic√°vel)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Deploy em produ√ß√£o conclu√≠do!\n\nüåê URL: ${{ steps.vercel_deploy.outputs.preview-url }}`
            })

  # Job de verifica√ß√£o p√≥s-deploy
  verify:
    name: Verificar Deploy
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Verificar sa√∫de da aplica√ß√£o
        run: |
          echo "üîç Verificando sa√∫de da aplica√ß√£o..."
          
          # Aguardar alguns segundos para o deploy propagar
          sleep 10
          
          # Verificar se a URL responde
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://insight-flow.vercel.app)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Aplica√ß√£o respondendo corretamente (HTTP $HTTP_CODE)"
          else
            echo "‚ö†Ô∏è Aplica√ß√£o retornou HTTP $HTTP_CODE"
            echo "Isso pode ser normal se a aplica√ß√£o usa SPA routing"
          fi
      
      - name: Registrar deploy
        run: |
          echo "üìù Deploy registrado com sucesso"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Commit: ${{ github.sha }}"
          echo "Autor: ${{ github.actor }}"

  # Job de notifica√ß√£o
  notify:
    name: Notificar Status
    needs: [validate, approval, build, deploy, verify]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Verificar status geral
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ] && [ "${{ needs.verify.result }}" = "success" ]; then
            echo "‚úÖ Deploy em produ√ß√£o conclu√≠do com sucesso!"
            echo ""
            echo "üìä Resumo:"
            echo "  ‚Ä¢ Ambiente: production"
            echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
            echo "  ‚Ä¢ Commit: ${{ github.sha }}"
            echo "  ‚Ä¢ Autor: ${{ github.actor }}"
            echo "  ‚Ä¢ URL: https://insight-flow.vercel.app"
          else
            echo "‚ùå Deploy falhou!"
            echo ""
            echo "Status dos jobs:"
            echo "  ‚Ä¢ Valida√ß√£o: ${{ needs.validate.result }}"
            echo "  ‚Ä¢ Aprova√ß√£o: ${{ needs.approval.result }}"
            echo "  ‚Ä¢ Build: ${{ needs.build.result }}"
            echo "  ‚Ä¢ Deploy: ${{ needs.deploy.result }}"
            echo "  ‚Ä¢ Verifica√ß√£o: ${{ needs.verify.result }}"
          fi
      
      - name: Notificar falha
        if: failure()
        run: |
          echo "‚ùå Deploy falhou - notifica√ß√£o enviada"
          # Aqui voc√™ pode adicionar integra√ß√£o com:
          # - Slack
          # - Email
          # - Discord
          # - Webhook customizado

  # Job de rollback em caso de falha
  rollback:
    name: Rollback Autom√°tico
    needs: [deploy, verify]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
      
      - name: Executar rollback
        run: |
          echo "üîÑ Iniciando rollback autom√°tico..."
          echo "‚ö†Ô∏è Deploy falhou - revertendo para vers√£o anterior"
          
          # Aqui voc√™ implementaria a l√≥gica de rollback
          # Por exemplo, fazer redeploy da vers√£o anterior no Vercel
          
          echo "‚úÖ Rollback conclu√≠do"
      
      - name: Notificar rollback
        run: |
          echo "üìß Notificando administradores sobre rollback"
          echo "Motivo: Falha no deploy ou verifica√ß√£o"
          echo "A√ß√£o: Vers√£o anterior restaurada automaticamente"
