/**
 * Gerenciador de Configura√ß√£o de Ambientes
 * 
 * Este m√≥dulo gerencia as configura√ß√µes de ambiente para o projeto,
 * garantindo que todas as vari√°veis necess√°rias estejam presentes
 * e validadas antes da inicializa√ß√£o da aplica√ß√£o.
 */

// Tipos de ambiente suportados
export type Environment = 'development' | 'test' | 'production';

// Interface para configura√ß√£o do Supabase
export interface SupabaseConfig {
  url: string;
  anonKey: string;
  serviceRoleKey?: string;
}

// Interface para configura√ß√£o de backup
export interface BackupConfig {
  backupUrl: string;
  backupServiceKey: string;
  retentionDays: number;
}

// Interface principal de configura√ß√£o de ambiente
export interface EnvironmentConfig {
  environment: Environment;
  supabase: SupabaseConfig;
  backupConfig?: BackupConfig;
  isDevelopment: boolean;
  isTest: boolean;
  isProduction: boolean;
}

// Vari√°veis de ambiente obrigat√≥rias
const REQUIRED_ENV_VARS = [
  'NEXT_PUBLIC_SUPABASE_URL',
  'NEXT_PUBLIC_SUPABASE_ANON_KEY',
  'VITE_ENVIRONMENT',
] as const;

// Vari√°veis de ambiente opcionais
const OPTIONAL_ENV_VARS = [
  'SUPABASE_SERVICE_ROLE_KEY',
  'BACKUP_SUPABASE_URL',
  'BACKUP_SUPABASE_SERVICE_KEY',
] as const;

/**
 * Classe para gerenciar configura√ß√µes de ambiente
 */
export class EnvironmentManager {
  private config: EnvironmentConfig | null = null;

  /**
   * Valida se todas as vari√°veis de ambiente obrigat√≥rias est√£o presentes
   * @throws Error se alguma vari√°vel obrigat√≥ria estiver faltando
   */
  private validateRequiredVars(): void {
    const missing: string[] = [];

    for (const varName of REQUIRED_ENV_VARS) {
      if (!import.meta.env[varName]) {
        missing.push(varName);
      }
    }

    if (missing.length > 0) {
      throw new Error(
        `Vari√°veis de ambiente obrigat√≥rias n√£o encontradas: ${missing.join(', ')}\n` +
        `Por favor, configure estas vari√°veis no arquivo .env.local ou nas configura√ß√µes do Vercel.`
      );
    }
  }

  /**
   * Valida o formato das URLs do Supabase
   * @param url URL a ser validada
   * @throws Error se a URL for inv√°lida
   */
  private validateSupabaseUrl(url: string): void {
    if (!url.startsWith('https://') || !url.includes('.supabase.co')) {
      throw new Error(
        `URL do Supabase inv√°lida: ${url}\n` +
        `A URL deve seguir o formato: https://[project-id].supabase.co`
      );
    }
  }

  /**
   * Valida o formato das chaves de API do Supabase
   * @param key Chave a ser validada
   * @param keyName Nome da chave para mensagens de erro
   * @throws Error se a chave for inv√°lida
   */
  private validateSupabaseKey(key: string, keyName: string): void {
    // Chaves JWT do Supabase come√ßam com "eyJ"
    if (!key.startsWith('eyJ')) {
      throw new Error(
        `${keyName} inv√°lida: deve ser um token JWT v√°lido do Supabase\n` +
        `Verifique se copiou a chave completa do dashboard do Supabase.`
      );
    }

    // Chaves JWT t√™m pelo menos 100 caracteres
    if (key.length < 100) {
      throw new Error(
        `${keyName} parece estar incompleta (muito curta)\n` +
        `Verifique se copiou a chave completa do dashboard do Supabase.`
      );
    }
  }

  /**
   * Detecta o ambiente atual baseado nas vari√°veis de ambiente
   * @returns O ambiente atual
   */
  private detectEnvironment(): Environment {
    const env = import.meta.env.VITE_ENVIRONMENT as string;
    
    if (env === 'production') return 'production';
    if (env === 'test') return 'test';
    return 'development';
  }

  /**
   * Carrega e valida a configura√ß√£o do ambiente atual
   * @returns Configura√ß√£o validada do ambiente
   * @throws Error se a configura√ß√£o for inv√°lida
   */
  public loadConfig(): EnvironmentConfig {
    // Se j√° carregou, retorna o cache
    if (this.config) {
      return this.config;
    }

    // Valida vari√°veis obrigat√≥rias
    this.validateRequiredVars();

    // Obt√©m as vari√°veis
    const supabaseUrl = import.meta.env.NEXT_PUBLIC_SUPABASE_URL as string;
    const supabaseAnonKey = import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string;
    const supabaseServiceKey = import.meta.env.SUPABASE_SERVICE_ROLE_KEY as string | undefined;

    // Valida formato das credenciais
    this.validateSupabaseUrl(supabaseUrl);
    this.validateSupabaseKey(supabaseAnonKey, 'NEXT_PUBLIC_SUPABASE_ANON_KEY');
    
    if (supabaseServiceKey) {
      this.validateSupabaseKey(supabaseServiceKey, 'SUPABASE_SERVICE_ROLE_KEY');
    }

    // Detecta ambiente
    const environment = this.detectEnvironment();

    // Monta configura√ß√£o
    this.config = {
      environment,
      supabase: {
        url: supabaseUrl,
        anonKey: supabaseAnonKey,
        serviceRoleKey: supabaseServiceKey,
      },
      isDevelopment: environment === 'development',
      isTest: environment === 'test',
      isProduction: environment === 'production',
    };

    // Adiciona configura√ß√£o de backup se dispon√≠vel
    const backupUrl = import.meta.env.BACKUP_SUPABASE_URL as string | undefined;
    const backupServiceKey = import.meta.env.BACKUP_SUPABASE_SERVICE_KEY as string | undefined;

    if (backupUrl && backupServiceKey) {
      this.validateSupabaseUrl(backupUrl);
      this.validateSupabaseKey(backupServiceKey, 'BACKUP_SUPABASE_SERVICE_KEY');
      
      this.config.backupConfig = {
        backupUrl,
        backupServiceKey,
        retentionDays: 30, // Padr√£o: 30 dias
      };
    }

    return this.config;
  }

  /**
   * Obt√©m a configura√ß√£o atual (deve chamar loadConfig primeiro)
   * @returns Configura√ß√£o do ambiente ou null se n√£o carregada
   */
  public getConfig(): EnvironmentConfig | null {
    return this.config;
  }

  /**
   * Verifica se est√° em ambiente de desenvolvimento
   */
  public isDevelopment(): boolean {
    return this.config?.isDevelopment ?? false;
  }

  /**
   * Verifica se est√° em ambiente de teste
   */
  public isTest(): boolean {
    return this.config?.isTest ?? false;
  }

  /**
   * Verifica se est√° em ambiente de produ√ß√£o
   */
  public isProduction(): boolean {
    return this.config?.isProduction ?? false;
  }

  /**
   * Imprime informa√ß√µes de debug sobre a configura√ß√£o (apenas em dev)
   */
  public printDebugInfo(): void {
    if (!this.config || this.config.isProduction) {
      return;
    }

    console.group('üîß Configura√ß√£o de Ambiente');
    console.log('Ambiente:', this.config.environment);
    console.log('Supabase URL:', this.config.supabase.url);
    console.log('Anon Key:', this.config.supabase.anonKey.substring(0, 20) + '...');
    console.log('Service Role Key:', this.config.supabase.serviceRoleKey ? '‚úì Configurada' : '‚úó N√£o configurada');
    
    if (this.config.backupConfig) {
      console.log('Backup URL:', this.config.backupConfig.backupUrl);
      console.log('Backup Retention:', this.config.backupConfig.retentionDays, 'dias');
    }
    
    console.groupEnd();
  }
}

// Inst√¢ncia singleton do gerenciador
const environmentManager = new EnvironmentManager();

// Exporta a inst√¢ncia e fun√ß√µes auxiliares
export default environmentManager;

/**
 * Carrega e valida a configura√ß√£o do ambiente
 * @returns Configura√ß√£o validada
 */
export function loadEnvironmentConfig(): EnvironmentConfig {
  return environmentManager.loadConfig();
}

/**
 * Obt√©m a configura√ß√£o atual
 * @returns Configura√ß√£o ou null se n√£o carregada
 */
export function getEnvironmentConfig(): EnvironmentConfig | null {
  return environmentManager.getConfig();
}

/**
 * Verifica se est√° em desenvolvimento
 */
export function isDevelopment(): boolean {
  return environmentManager.isDevelopment();
}

/**
 * Verifica se est√° em teste
 */
export function isTest(): boolean {
  return environmentManager.isTest();
}

/**
 * Verifica se est√° em produ√ß√£o
 */
export function isProduction(): boolean {
  return environmentManager.isProduction();
}
